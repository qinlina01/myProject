Day12-01 AOP





Git初始化配置 
1） 配置使用git仓库的人员姓名 
       git config --global user.name "Your Name Comes Here" 
2） 配置使用git仓库的人员email 
       git config --global user.email you@yourdomain.example.com 
3.1. Git init 
或者使用git init-db。创建一个空的Git库。
3.2. Git add 
将当前工作目录中更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步。 
可以递归添加，即如果后面跟的是一个目录作为参数，则会递归添加整个目录中的所有子目录和文件。例如： 
       git add dir1 （ 添加dir1这个目录，目录下的所有文件都被加入 ） 
       Git add f1 f2 （ 添加f1，f2文件） 
       git add .      ( 添加当前目录下的所有文件和子目录 ) 
3.3. Git rm (如不需要此步可省去)
从当前的工作目录中和索引中删除文件。 
可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件。例如： 
       git rm –r * （进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录） 
       git rm f1    (删除文件f1，包含本地目录和index中的此文件记录) 
       git rm --ached f1 (删除文件f1，不会删除本地目录文件，只删除index中的文件记录；将已经git add的文件remove到cache中,这样commit的时候不会提交这个文件, 适用于一下子添加了很多文件, 却又想排除其中个别几个文件的情况.) 

3.4. Git commit (在这之前可以先查看版本库的状态status)
提交当前工作目录的修改内容。 
直接调用git commit命令，会提示填写注释。通过如下方式在命令行就填写提交注释：git commit -m "Initial commit of gittutor reposistory"。 注意，和CVS不同，git的提交注释必须不能为空，否则就会提交失败。
3.5. Git status 
查看版本库的状态。可以得知哪些文件发生了变化，哪些文件还没有添加到git库中等等。 建议每次commit前都要通过该命令确认库状态。 
最常见的误操作是， 修改了一个文件， 没有调用git add通知git库该文件已经发生了变化就直接调用commit操作， 从而导致该文件并没有真正的提交。这时如果开发者以为已经提交了该文件，就继续修改甚至删除这个文件，那么修改的内容就没有通过版本管理起来。如果每次在 提交前，使用git status查看一下，就可以发现这种错误。因此，如果调用了git status命令，一定要格外注意那些提示为 “Changed but not updated:”的文件。 这些文件都是与上次commit相比发生了变化，但是却没有通过git add标识的文件。 
3.6. Git log 
查看历史日志，包含每次的版本变化。每次版本变化对应一个commit id。 
       Git log -1 
       -1的意思是只显示一个commit，如果想显示5个，就-5。不指定的话，git log会从该commit一直往后显示。 

3.7 生成ssh key

首先检查是否已生成密钥 cd ~/.ssh，ls如果有3个文件，则密钥已经生成，id_rsa.pub就是公钥

如果没有生成，那么通过$ ssh-keygen -t rsa -C “自己的邮箱地址”来生成。(直接三个回车)

1）是路径确认，直接按回车存默认路径即可

2）直接回车键，这里我们不使用密码进行登录, 用密码太麻烦;

3）直接回车键

3.8 检查已生成的密cd ~/.ssh  

查看当前目录的文件ls 

生成成功后，去对应目录用记事本打开id_rsa.pub，得到ssh key公钥cat id_rsa.pub

3.9 为github账号配置ssh key

切换到github，展开个人头像的小三角，点击settings 
然后打开SSH and GPG keys菜单， 点击Add SSH key新增密钥，填上标题，跟仓库保持一致吧，好区分。 

接着将id_rsa.pub文件中key粘贴到此，最后Add key生成密钥吧。

3.9     git remote add origin git@github.com:liuf59188/java.git//关联远程仓库 

4.0    git push -u origin master //把本地库的所有内容推送到远程库上

如果出现failed to push some refs to 

出现错误的主要原因是github中的README.md文件不在本地代码目录中。可以通过如下命令进行代码合并【注：pull=fetch+merge]

git pull --rebase origin master
此时再执行语句 git push -u origin master即可完成代码上传到github





1.Spring AOP 是什么?
1)Spring 中一个核心应用组件
2)Spring 中面向切面编程组件

FAQ?
Spring AOP 这种应用机制是如何实现的?

依托于AspectJ框架实现面向切面编程.

思考:
1)Spring IOC 
Spring中一个实现控制反转功能的核心应用组件.
2)Spring MVC
Spring MVC 是基于Spring实现一个表示层应用组件.

2.Spring AOP 应用场景?

1)事务控制
2)日志管理
3)缓存管理
4)权限管理
5)..................................

Spring AOP 底层通过代理方式为核心业务植入扩展业务功能.

FAQ?
Spring AOP 是如何为我们的业务对象创建代理对象的呢?
1)假如业务对象实现了接口默认使用JDK创建动态代理对象
2)假如业务对象没有实现接口默认启用CGLIB创建动态代理对象

3.Spring AOP 相关术语?
1)切面(@Aspect):封装了扩展业务逻辑的一个对象
2)通知(Advice):扩展业务逻辑中的一步骤,通常对应一个方法.
a)@Before (前置通知)
b)@After(最终通知)
c)@AfterReturning(返回通知)
d)@AfterThrowing(异常通知)
e)@Around(环绕通知)

  FAQ: 通知应用结构
   try{
      @Before
      核心业务
      @AfterReturning
   }catch(Exception e){
      @AfterThrowing
   }finally{
      @After
   }

3)切入点(@Pointcut):业务对象中相关方法的集合.
a)bean表达式
b)execution表达式
c)winth表达式(了解)

4)连接点(JoinPoint):切入点中的某一个方法对象.

4.Spring AOP 的实现

1)添加AOP依赖
2)配置AOP(applicationContext.xml)
3)定义切面(@Aspect):通知,切入点,连接点
4)单元测试(获取bean对象执行具体业务)

假如在定义切入点时,包含了某个业务类中方法,此时
在获取具体业务bean时,获得的是代理对象.

FAQ?
假如现在让你设计一个系统,为某个类动态创建代理对象,你如何设计?
1)创建一个字节码解析对象(必须能够读懂字节码文件)
2)创建一个工具类根据字节码创建类文件
3)基于创建类文件创建Java对象.

5.Spring AOP 中切面的执行顺序
借助@Order注解实现.
----------------------------------------------------------------------
Day12-02 Spring 中的事务处理?

1.事务概述?

事务就是软件系统中一个不可分割的业务逻辑.例如存钱,取钱,转账.

2.事务四大特性?(ACID)

1)原子性(一个事务中的多个操作要么都执行要么都不执行)
2)一致性(事务前后的状态是一致的.)
3)隔离性(多个事务执行时应是相互隔离的)
4)持久性(事务一旦结束将会发生持久性的变化)

事务的四大特性解决了什么问题?业务完整性(区分数据完整性)

3.事务隔离级别?

1)多个事务是否可以并发执行?可以
2)多个事务并发执行可能会出现什么问题?

a)脏读(一个事务读取了其它事务未提交的数据)
b)不可重复读(一个事务读取,读取内容不一致)
c)幻读(虚读)(一个事务内部更新或删除了看不到数据)

3)多事务并发执行时如何控制或防止如上问题的发生?
一般可以通过设置事务的隔离级别进行控制.

4)事务的隔离级别如何理解,都有哪些隔离级别?

事务隔离界可以理解为事务并发执行时的一种隔离方式,mysql
中的隔离级别有如下几种方式:
1)READ_UNCOMMITTED (此级别可能会出现脏读)
2)READ_COMMITTED(此级别可能会出现不可重复读)
3)REPEATABLE_READ(此级别可能会出现幻读)
4)SERIALIZABLE(多事务串行执行)

说明:事务的隔离级别越高,并发性就会越差.

幻读现象演示:(在REPEATABLE_READ隔离级别下演示)

1)首先要检测表的存储引擎是否支持事务
show create table pet;
假如不是InnoDB,建表时指定存储引擎.
2)开启两个客户端窗口,分别开启手动事务控制方式
a)client-A 
b)client-B
c) 执行操作

client-A: start  transaction;
client-B: start transaction;
client-B: select * from pet;
client-A: insert into pet values (4,'D');
client-B: select * from pet; 此时看不到D数据
client-A: commit;
client-B: select * from pet; 此时看不到D数据
client-B: update pet set name='DD' where id=4;  ok
client-B: commit;

FAQ?
1)MySQL 中如何查看当前系统默认隔离级别?
show variables like '%storage_engine%';
2)MySQL 中如何设置事务隔离级别?
set session transaction isolation level 'reapable read'
3)MySQL 自带客户端如何设置事务的手动提交方式?
start stransaction;
....
commit;

5.事务在spring中的处理方式?

  1)编程式事务处理(现在用的比较少)
  2)声明式事务处理(基于xml或annotation)

   案例:编程式事务

   try{
   Connection conn=DbUtil.getConnection();
   conn.setAutoCommit(false);
   .......
   conn.commit();
   }catch(Exception e){
   e.printStackTrace();
   conn.rollback();
   }finally{
   conn.close();
   }

  问题:编码量会比较大,职责不清晰,维护比较困难.
  解决方案:封装,提取,AOP

  案例:声明式事务处理(xml,annotation)
  底层基于AOP机制实现,将事务的处理封装起来,
  然后通过动态代理的方式,植入事务功能.

  @Transactional(.....)
  @Service
  class ProjectServiceImpl implements ProjectService{
         
         @Transaction(......)
         public void saveObject(Project entity){
             ....
         }
   }
   
   Spring中声明式事务处理:
   step01:添加相关依赖(spring-jdbc,spring-tx)
   step02:修改spring配置文件
   step03:假如基于注解方式实现,需要使用@Transactional
  
   FAQ?

   1)使用xml配置声明式事务处理,有何优势,有何劣势?
   a)优势 侵入性小
   b)劣势 灵活性不好
   2)使用注解方式实现声明式事务处理,有何优势,有何劣势?
   a)优势 灵活性好
   b)劣势 侵入性稍微大一些.

6.事务在spring应用中的传播特性?

   事务传播特性一般指多个事务并发执行时,事务方法间
出现相互调用场景时事务的传播处理方式. 例如

   A事务中有一个method01
   B事务中有一个method02

  现在假如需要method01 调用 method02,此时的事务
该如何执行?此事务如何执行由它的传播特性决定.

   常用事务传播特性:
   1)Propagation.REQUIRED (重点掌握)
   2)Propagation.REQUIRES_NEW
   3)................

7.事务相关FAQ?

1)你项目中的事务是如何处理的?
   基于注解方式实现的声明式事务处理
   你为什么没有使用xml实现声明式事务处理?不够灵活
     
2)基于注解实现声明式事务处理底层会依托于什么机制?
   依托于Spring AOP机制实现

3)Spring AOP 机制的实现依托于哪种模式?
   Spring AOP的实现是借助于AspectJ框架,而这个框架的底层
   实现就是动态代理模式.

4)Spring 中底层是如何为你的业务对象创建代理对象的呢?
   JDK默认代理,CGLIB代理


扩展:理解数据库中的悲观锁,乐观锁?

1)悲观锁 (只允许当前事务更新,其它事务全部阻塞)
   select * from tableName where ... for update;
2)乐观锁 (所有事务都可以更新,但只能有一个更新OK)
   乐观锁的实现一个是在数据库表中添加一个版本(version)字段.

   当不同事务从数据库获取数据,然后进行更新时,同时也要更新版
   本信息.
   说明:不同事务获取的数据假如是相同的那么获取的版本也是系统的.
   例如:现有一个订票系统
   A 事务获取100张票  版本是1,此时要购买一张
   B 事务获取100张票  版本是1,此时要购买两张
  
   A事务: update tableName
              set count=100-1,version=2 
              where id=1 and version=1
   B事务: update tableName
              set count=100-2,version=2
              where id=1 and version=1
  请问:悲观锁和乐观锁都是为了解决什么问题?丢失更新.

--------------------------------------------------------------------
 Day12-03 项目中的权限管理?

1.何为权限管理?

   系统中的权限管理一般是对用户的认证管理和授权管理.
   认证管理:判定用户是否是我们的合法用户(最常用的就是账号和密码)
   授权管理:对认证用户的权限管理(有没有权限操作系统模块).

2.权限管理的类型?

1)粗粒度的权限控制

   一般指对模块业务进行权限控制,例如:
  a)允许访问项目模块,不允许访问团目模块
  b)允许访问项目模块的添加,查询,不允许访问删除操作.

2)细粒度的权限控制

   一般指对一个业务中相关数据进行权限控制,例如
  a)只能查看项目模块未禁用的项目信息
  b)只能访问境外游的项目信息

FAQ?
  1) 如何进行粗粒度的权限控制?

  a)基于角色实现粗粒度权限控制
     例如 if(user.getRole().equals("项目经理")){....}
     优势:业务简单,代码量小.
     劣势:灵活性不够,角色可能经常发生变化,一旦变化就可能会修改代码

  b)基于资源(url)实现粗粒度权限控制
     例如 if(user.getResource().hasUrl(...)){}
     优势:稳定性,灵活性比较好(url相对稳定)
     劣势:编程相对复杂(需要管理所有的url)

     那么请问如何实现基于url的粗粒度的权限控制?
     b.1)Filter(过滤器)
     b.2)Interceptor (拦截器)
     b.3)Proxy(动态代理)
     b.4)AOP(面向切面)
   
2) 如何进行细粒度的权限控制?
      一般是在代码级别根据业务进行细粒度控制.例如基于
     用户的注册时间.


3.权限管理相关业务模块分析?

   1)用户管理(登录用户)
   2)角色管理(用户角色的管理)
   3)资源管理(菜单管理,每个菜单都对应一个url)
   4)组织机构(本质就是部门机构信息的管理)

FAQ?

  1)用户与角色是什么关系?(many2many)
  2)角色与资源时什么关系?(many2many)
  3)组织机构的表设计如何实现?(自关联:id,parentId)
  4)组织结构与用户是什么关系?(one2many)
 
  请问多对多的关系,在表设计时由谁维护这个关系?
  一般要借助中间表实现,在中间表中建立这种多对多的关系.

4.权限管理应用框架?

   1)市场上常用的权限管理框架有哪些?
      a)Spring Security
      b)Apache Shiro
   2)使用这些框架能帮我们解决什么问题?
      简化权限管理相关模块代码的编写,提高工作效率.

5.Shiro 安全框架应用

a) Shiro 是什么?
     Apache 旗下的一个权限管理框架,实现了用户认证和权限管理等操作.
b) Shiro 的基本架构及相关组件?

     b.1)Subject(主体,一般可以理解为封装了用户信息的对象)
     b.2)Security Manager(任何和权限管理对象)
     b.3)Authenticator(认证管理器):访问Realm进行认证
     b.4)Authorizer(授权管理器):访问Realm进行权限管理
     b.5)Realm(数据访问业务对象):负责数据认证和授权
     b.6)SessionManager(会话管理):存储登录用户信息
     b.7)CacheManager(缓存管理):缓存用户权限信息
     b.8)Cryptography(加密对象,通过MD5,SHA等技术实现加密)

     以上组件中需要自己写的类就是realm,其它的基于配置实现.
    
c) Shiro 的认证流程?

     c.1)首先调用Subject.login(token)进行登录， 其会自动委托给Security Manager，调用之前必须通过SecurityUtils. setSecurityManager()设置；
     c.2)SecurityManager负责真正的身份验证逻辑；它会委托给Authenticator进行身份验证；
     c.3)Authenticator才是真正的身份验证者，Shiro API中核心的身份认证入口点，此处可以自定义插入自己的实现；
     c.4)Authenticator可能会委托给相应的AuthenticationStrategy进行多Realm身份验证，默认ModularRealmAuthenticator会调用AuthenticationStrategy进行多Realm身份验证；
     c.5)Authenticator会把相应的token传入Realm，从Realm获取身份验证信息，如果没有返回/抛出异常表示身份验证失败了。此处可以配置多个Realm，将按照相应的顺序及策略进行访问。\

d) Shiro 的授权(权限管理)流程?
e) Shiro 的加密实现?(MD5,SHA)
f)  Shiro 中缓存的应用?(ehcache)
g) .................................................

---------------------------------------------------------------------
作业
1)总结项目
2)完善简历







   


   
 



















  







   

  










  






















































